/**
 * Привет! Перед тобой довольно интересное задание :)
 * По времени ты не ограничен, но его надо будет зафиксировать.
 * Время выполнения никак не скажется на результате оценки.
 * Желательно результат работы выложить на github.
 * 
 * Задание:
 * 
 * Ниже идет кусок кода, содержащего базовые настройки необходимые для выполнения задания.
 * 
 * Необходимо написать скрипт который на основе лент (this.tapes) будет генерировать игровые поля от
 * 
 * 0 0 0 0 0 0  до  8 8 8 8 8 8
 * 0 0 0 0 0 0      8 8 8 8 8 8
 * 0 0 0 0 0 0      8 8 8 8 8 8
 * 0 0 0 0 0 0      8 8 8 8 8 8
 * 
 * В каждом игровом поле надо проверить все линии (this.lines)
 * Линии задаются одномерным массивом вида [0,1,2,..,ROW], где индекс значения массива говорит о колонке на поле, а значение говорит о строке.
 * Выигрыш по линии считается по таблице выплат (this.payout). Линии хитуют слева на право. [3 3 3 3 4 4] - хитует как 3 3 3 3, а [4 3 3 3 3 3] - не хитует
 * 
 * Пример для линии [ 0 0 0 0 0 0 ]
 * 
 * [1 1 1 3 3 3]  - combo будет [1 1 1] - выплата будет: this.payout.get(1).prizes[combo.length - 1] = 2
 *  1 2 3 4 5 6
 *  0 1 2 3 4 5
 *  2 3 4 5 6 7
 * 
 * По итогу всех прогонов необходимо:
 * - вывести количество итераций
 * - вывести количество выигрышных итераций
 * - вывести количество проигрышных итераций
 * 
 * Если слишком просто:
 * 
 * 1) если слишком просто, представь, что символ 8 - заменяет любой другой символ и например
 * 
 * 1 8 8 1 8 1 даст комбо 1 1 1 1 1 1
 * 
 * 2) если слишком просто, представь, что символ 8 - заменяет любой другой символ и если в линии символы 8 8 8 1 1 1,
 * то это две комбо 8 8 8 и 1 1 1 1 1 1  и надо выбрать самую дорогую и использовать ее в качестве выигрыша
 * 
 * 3) если слишком просто, представь, что хитуют линии не только слева направо, но и обратно и надо выбрать самую дорогую комбо применив предыдущие усложнения
 * 
 * Пиши аккуратно, перед коммитом перечитай еще раз свой код ;)
 * 
 * Желаю удачи!
 */


module.exports = class Settings {
    payout: Map<Number, Object>;
    tapes: Array<Array<Number>>
    lines: Array<Array<Number>>

    constructor() {

        // l - low / h - high
        this.payout = new Map([
            [0, { sym: 'l1', prizes: [0, 0, 2, 16, 60, 180] }],
            [1, { sym: 'l2', prizes: [0, 0, 2, 16, 60, 180] }],
            [2, { sym: 'l3', prizes: [0, 0, 4, 20, 80, 240] }],
            [3, { sym: 'l4', prizes: [0, 0, 4, 20, 80, 240] }],
            [4, { sym: 'h1', prizes: [0, 0, 8, 30, 120, 360] }],
            [5, { sym: 'h2', prizes: [0, 0, 10, 40, 160, 480] }],
            [6, { sym: 'h3', prizes: [0, 0, 12, 50, 200, 600] }],
            [7, { sym: 'h4', prizes: [0, 0, 16, 60, 240, 720] }],
            [8, { sym: 'wild', prizes: [0, 0, 20, 80, 320, 960] }]
        ])

        // ленты барабанов
        this.tapes = [
            [0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 1, 2], // reel1
            [0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 1, 2], // ...
            [0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 1, 2],
            [0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 1, 2],
            [0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 1, 2],
            [0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 1, 2]  // reel6
        ]

        /**
         * ┌──────────────────────────────────────────────────────────────┐
         * │                            LINES                             │
         * └──────────────────────────────────────────────────────────────┘
         * ┌───────────────────────────────────────────────────────────────────────┐
         * │                                                                       │
         * │  ▆ ▆ ▆ ▆ ▆ ▆   ▢ ▢ ▢ ▢ ▢ ▢   ▢ ▢ ▢ ▢ ▢ ▢   ▢ ▢ ▢ ▢ ▢ ▢   ▢ ▢ ▢ ▢ ▢ ▢  │
         * │  ▢ ▢ ▢ ▢ ▢ ▢   ▆ ▆ ▆ ▆ ▆ ▆   ▢ ▢ ▢ ▢ ▢ ▢   ▢ ▢ ▢ ▢ ▢ ▢   ▆ ▢ ▆ ▢ ▆ ▢  │
         * │  ▢ ▢ ▢ ▢ ▢ ▢   ▢ ▢ ▢ ▢ ▢ ▢   ▆ ▆ ▆ ▆ ▆ ▆   ▢ ▢ ▢ ▢ ▢ ▢   ▢ ▆ ▢ ▆ ▢ ▆  │
         * │  ▢ ▢ ▢ ▢ ▢ ▢   ▢ ▢ ▢ ▢ ▢ ▢   ▢ ▢ ▢ ▢ ▢ ▢   ▆ ▆ ▆ ▆ ▆ ▆   ▢ ▢ ▢ ▢ ▢ ▢  │
         * ├───────────────────────────────────────────────────────────────────────┤
         * │  ▆ ▢ ▆ ▢ ▆ ▢   ▢ ▢ ▢ ▢ ▢ ▢   ▢ ▢ ▢ ▢ ▢ ▢   ▢ ▆ ▢ ▆ ▢ ▆   ▢ ▢ ▢ ▢ ▢ ▢  │
         * │  ▢ ▆ ▢ ▆ ▢ ▆   ▢ ▢ ▢ ▢ ▢ ▢   ▢ ▆ ▢ ▆ ▢ ▆   ▆ ▢ ▆ ▢ ▆ ▢   ▢ ▢ ▢ ▢ ▢ ▢  │
         * │  ▢ ▢ ▢ ▢ ▢ ▢   ▆ ▢ ▆ ▢ ▆ ▢   ▆ ▢ ▆ ▢ ▆ ▢   ▢ ▢ ▢ ▢ ▢ ▢   ▢ ▆ ▢ ▆ ▢ ▆  │
         * │  ▢ ▢ ▢ ▢ ▢ ▢   ▢ ▆ ▢ ▆ ▢ ▆   ▢ ▢ ▢ ▢ ▢ ▢   ▢ ▢ ▢ ▢ ▢ ▢   ▆ ▢ ▆ ▢ ▆ ▢  │
         * ├───────────────────────────────────────────────────────────────────────┤
         * │  ▆ ▢ ▢ ▢ ▢ ▆   ▢ ▆ ▆ ▆ ▆ ▢   ▢ ▢ ▢ ▢ ▢ ▢   ▢ ▢ ▢ ▢ ▢ ▢   ▢ ▢ ▆ ▆ ▢ ▢  │
         * │  ▢ ▆ ▆ ▆ ▆ ▢   ▆ ▢ ▢ ▢ ▢ ▆   ▢ ▢ ▢ ▢ ▢ ▢   ▢ ▢ ▢ ▢ ▢ ▢   ▢ ▢ ▢ ▢ ▢ ▢  │
         * │  ▢ ▢ ▢ ▢ ▢ ▢   ▢ ▢ ▢ ▢ ▢ ▢   ▆ ▢ ▢ ▢ ▢ ▆   ▢ ▆ ▆ ▆ ▆ ▢   ▢ ▢ ▢ ▢ ▢ ▢  │
         * │  ▢ ▢ ▢ ▢ ▢ ▢   ▢ ▢ ▢ ▢ ▢ ▢   ▢ ▆ ▆ ▆ ▆ ▢   ▆ ▢ ▢ ▢ ▢ ▆   ▆ ▆ ▢ ▢ ▆ ▆  │
         * ├───────────────────────────────────────────────────────────────────────┤
         * │  ▆ ▆ ▢ ▢ ▆ ▆   ▆ ▆ ▢ ▢ ▆ ▆   ▢ ▢ ▢ ▢ ▢ ▢   ▢ ▢ ▢ ▢ ▢ ▢   ▢ ▢ ▆ ▆ ▢ ▢  │
         * │  ▢ ▢ ▆ ▆ ▢ ▢   ▢ ▢ ▢ ▢ ▢ ▢   ▢ ▢ ▢ ▢ ▢ ▢   ▆ ▢ ▢ ▢ ▢ ▆   ▢ ▆ ▢ ▢ ▆ ▢  │
         * │  ▢ ▢ ▢ ▢ ▢ ▢   ▢ ▢ ▢ ▢ ▢ ▢   ▢ ▢ ▆ ▆ ▢ ▢   ▢ ▆ ▢ ▢ ▆ ▢   ▆ ▢ ▢ ▢ ▢ ▆  │
         * │  ▢ ▢ ▢ ▢ ▢ ▢   ▢ ▢ ▆ ▆ ▢ ▢   ▆ ▆ ▢ ▢ ▆ ▆   ▢ ▢ ▆ ▆ ▢ ▢   ▢ ▢ ▢ ▢ ▢ ▢  │
         * └───────────────────────────────────────────────────────────────────────┘
         */

        this.lines = [
            [0,0,0,0,0,0], [1,1,1,1,1,1], [2,2,2,2,2,2], [3,3,3,3,3,3],
            [1,2,1,2,1,2], [0,1,0,1,0,1], [2,3,2,3,2,3], [2,1,2,1,2,1],
            [1,0,1,0,1,0], [3,2,3,2,3,2], [0,1,1,1,1,0], [1,0,0,0,0,1],
            [2,3,3,3,3,2], [3,2,2,2,2,3], [3,3,0,0,3,3], [0,0,1,1,0,0],
            [0,0,3,3,0,0], [3,3,2,2,3,3], [1,2,3,3,2,1], [2,1,0,0,1,2]
        ]

    }
}
